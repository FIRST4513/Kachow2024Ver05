package frc.robot.XBoxCtrlrs.operator.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.Robot;
import frc.robot.mechanisms.arm.ArmConfig;
import frc.robot.mechanisms.arm.ArmConfig.ARMPOS;
import frc.robot.mechanisms.elevator.ElevatorConfig;
import frc.robot.mechanisms.elevator.ElevatorConfig.ELEVPOS;

public class ArmElevDriveCmd extends Command {
    double armTgt, elevTgt = 0;
    double timeout;
    boolean tgtInside, tgtOutside = false;
    boolean armToSafeFirstFlag = false;
    int case4State = 0;              // State machine for case 4 In to Out
    Timer runTimer = new Timer();

    static enum CmdState { OUT_TO_OUT, OUT_TO_IN, IN_TO_IN, IN_TO_OUT, DONE};
    CmdState cmdState;

    public ArmElevDriveCmd(ArmConfig.ARMPOS armDest , ElevatorConfig.ELEVPOS elevDest , double timeout) {
        // Set Target Arm Angle
        if (armDest == ARMPOS.GROUND)   armTgt = ArmConfig.armGroundAngle;
        if (armDest == ARMPOS.AMP)      armTgt = ArmConfig.armAmpAngle;
        if (armDest == ARMPOS.TRAP)     armTgt = ArmConfig.armTrapAngle;
        if (armDest == ARMPOS.STOW)     armTgt = ArmConfig.armStowAngle;
        if (armDest == ARMPOS.SHOOTER)  armTgt = ArmConfig.armShooterAngle;

        if (elevDest == ELEVPOS.BOTTOM)     elevTgt = 0.0;
        if (elevDest == ELEVPOS.GROUNDPU)   elevTgt = ElevatorConfig.posGroundRot;
        if (elevDest == ELEVPOS.MID)        elevTgt = ElevatorConfig.posMidRot;
        if (elevDest == ELEVPOS.TOP)        elevTgt = ElevatorConfig.posTopRot;
        if (elevDest == ELEVPOS.TRAP)       elevTgt = ElevatorConfig.posTrapRot;
        //if (elevDest == ELEVPOS.AMP)        elevTgt = ElevatorConfig.posAmpRot

        // Determine if target Arm angle is Inside or Outside of robot
        if (armTgt >= 0)        { tgtOutside = true;
        } else                  { tgtOutside = false; }
        tgtInside = ! tgtOutside;       // Can use either perspective as desired

        this.timeout = timeout;
        addRequirements(Robot.arm);
        addRequirements(Robot.elevator);
        System.out.println("ArmElevDriveCmd - Constructor called  armTgt=" + armTgt + "  elevTgt=" + elevTgt);
    }

    @Override
    public void initialize() {
        runTimer.reset();
        runTimer.start();

        // Set Command State based on destination and current arm position
        if (tgtOutside && Robot.arm.isArmInside())      { cmdState = CmdState.IN_TO_OUT; }
        if (tgtInside  && Robot.arm.isArmInside())      { cmdState = CmdState.IN_TO_IN; }
        if (tgtOutside && Robot.arm.isArmOutside())     { cmdState = CmdState.OUT_TO_OUT; }
        if (tgtInside  && Robot.arm.isArmOutside())     { cmdState = CmdState.OUT_TO_IN; }

        if (Robot.arm.isAtGroundPos())  { armToSafeFirstFlag = true; }
        else                            { armToSafeFirstFlag = false; }

        if (cmdState == CmdState.IN_TO_OUT) {case4State = 1 ; }
        else                                {case4State = 0 ; }

        if ( cmdState == CmdState.IN_TO_IN)     System.out.println("ArmElevDriveCmd cmdState = IN TO IN");
        if ( cmdState == CmdState.IN_TO_OUT)    System.out.println("ArmElevDriveCmd cmdState = IN TO OUT");
        if ( cmdState == CmdState.OUT_TO_IN)    System.out.println("ArmElevDriveCmd cmdState = OUT TO IN");
        if ( cmdState == CmdState.OUT_TO_OUT)   System.out.println("ArmElevDriveCmd cmdState = OUT TO OUT");
        System.out.println("ArmElevDriveCmd - armTgt=" + armTgt + "  elevTgt=" + elevTgt);
        System.out.println("Current Arm Angle=" + Robot.arm.getArmCurrentAngle());
    }

    @Override
    public void execute() {

        // ------------------------------------------
        // Case 1 : Out to Out - Is a Simple process
        // ------------------------------------------
        if (cmdState == CmdState.OUT_TO_OUT) {
            // We can move both at the same time until they both reach their target
            Robot.arm.setMMAngle(armTgt);
            Robot.elevator.setByMM(elevTgt);
            if (Robot.arm.isAtTarget() && Robot.elevator.isAtTarget()) cmdState = CmdState.DONE;
        }

        // ----------------------------------------
        // Case 2 : In to In - Is a Simple process
        // ----------------------------------------
        if (cmdState == CmdState.IN_TO_IN) {
            // First Send Elevator to ground
            Robot.elevator.setByMM(0.0);

            if (Robot.elevator.isAtTarget()) {
                // Its at ground so now lets send arm to position
                Robot.arm.setMMAngle(armTgt);
                // check if target reached
                if (Robot.arm.isAtTarget()) cmdState = CmdState.DONE;
            }
        }

        // -----------------------------------------------------
        // Case 3 : Out to In - Not quit as Simple of a process
        // -----------------------------------------------------
        if (cmdState == CmdState.OUT_TO_IN) {
            // If arm is starting at ground need to do an Arm to Safe position first
            if (armToSafeFirstFlag == true) {
                // send arm to safe angle first
                Robot.arm.setMMAngle(ArmConfig.armSafeToTravelAngle);
                if (Robot.arm.isAtTarget()) {
                    // We have reached are safe position so, Clear flag so we can fall on through to next step on next pass
                    armToSafeFirstFlag = false;
                }
                return; // Lets get out until we reach position
            }
            // We can now Send Elevator to bottom
            Robot.elevator.setByMM(0.0);
            if (Robot.elevator.isAtTarget()) {
                // Its at ground so now lets send arm to position
                Robot.arm.setMMAngle(armTgt);
                // check if target reached
                if (Robot.arm.isAtTarget()) cmdState = CmdState.DONE;
            }
            // Otherwise return and keep looping untill we reach our destination
        }

        // ------------------------------------------------------
        // Case 4 : In to Out - Not quit as Simple of a process
        // ------------------------------------------------------
        if (cmdState == CmdState.IN_TO_OUT) {

            //  First step send Elevator to bottom
            if (case4State  == 1) {
                Robot.elevator.setByMM(0.0);
                if ( !Robot.elevator.isAtTarget()) {

                    // Its NOT ground so now lets get out and let it run to position
                    //System.out.println("Elevator NOT!!!! at bottom!");
                    return;
                } else {
                    case4State = 2 ; // we have reached bottom done done with first state
                    System.out.println("Case 4 State 1 Com[lete elev at bottom!");
                }
            }

            //  Second step send Arm to Safe
            if (case4State  == 2) {
                Robot.arm.setMMAngle(ArmConfig.armSafeToTravelAngle);
                if ( !Robot.arm.isAtTarget()) {
                    // We have NOT reached safe spot so exit for now.
                    // System.out.println("Arm NOT!!!! at bottom!");
                    return; }
                else {
                    // We HAVE reached out safe spot go to next step
                    System.out.println("Case 4 State 2 - arm in safe pos!");
                    case4State = 3 ;
                }
            }

            //  Third (final) step Elev and Arm to Position at same time
            if (case4State  == 3) {
                Robot.elevator.setByMM(elevTgt);     // todo get correct tgt ht; 
                Robot.arm.setMMAngle(armTgt);

                if ( Robot.elevator.isAtTarget() && Robot.arm.isAtTarget()) {
                     System.out.println("Case 4 State 3 Elevator and arm at final pos");
                    // Both Arm and Elev at position - were done
                    cmdState = CmdState.DONE;
                    return;
                }
            }
        }

        //System.out.println("ArmElevDriveSafeCmd - Execute, cmdState = " + cmdState);
    }

    @Override
    public void end(boolean interrupted) {
        //Robot.arm.holdArmMM();            // This may not be needed now that we are using motion magic state
        //Robot.elevator.elevHoldMtr();     // This may not be needed now that we are using motion magic state 
        System.out.println("ArmElevDriveSafeCmd - End called");
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (cmdState == CmdState.DONE) { System.out.println("cmd state done"); return true; }
        if (runTimer.get() > timeout)  { System.out.println("cmd TIMED-OUT"); return true; }
        return false;
    }
}
